include "console.iol"
include "time.iol"
include "database.iol"
include "jolie-proxy-interface.iol"
include "runtime.iol"


// üìå Service JolieProxy
service JolieProxy {
    execution { concurrent }
    
    // create table if it does not exist
    define createBooksDatabase {
        scope ( createTable ) {
            install ( SQLException => println@Console("Books table already there" + SQLException)() );
            updateRequest =
                "-- Table editeur
                CREATE TABLE editeur (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nom VARCHAR(255) NOT NULL UNIQUE
                );";
            update@Database( updateRequest )( ret )
            updateRequest =
                "-- Table categorie
                CREATE TABLE categorie (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nom VARCHAR(255) NOT NULL UNIQUE
                );";
            update@Database( updateRequest )( ret )
            updateRequest =
                " -- Table auteur
                CREATE TABLE auteur (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nom VARCHAR(255) NOT NULL UNIQUE
                );";
            update@Database( updateRequest )( ret )
            updateRequest =
                " -- Table livre
                CREATE TABLE livre (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    titre VARCHAR(255) NOT NULL,
                    description LONGVARCHAR,
                    isbn VARCHAR(20) NOT NULL,
                    annee_apparition INTEGER,
                    image VARCHAR(255),
                    id_editeur INTEGER,
                    FOREIGN KEY (id_editeur) REFERENCES editeur(id) ON DELETE SET NULL
                );";
            update@Database( updateRequest )( ret )
            updateRequest =
                "CREATE INDEX livre_id_editeur_idx ON livre(id_editeur);";
            update@Database( updateRequest )( ret )
            updateRequest =
                "-- Table livrecategorie
                CREATE TABLE livrecategorie (
                    id_livre INTEGER,
                    id_categorie INTEGER,
                    PRIMARY KEY (id_livre, id_categorie),
                    FOREIGN KEY (id_livre) REFERENCES livre(id) ON DELETE CASCADE,
                    FOREIGN KEY (id_categorie) REFERENCES categorie(id) ON DELETE CASCADE
                );";
            update@Database( updateRequest )( ret );
            updateRequest = 
                "CREATE INDEX livrecategorie_idx ON livrecategorie(id_categorie, id_livre);";
            update@Database( updateRequest )( ret )
            updateRequest =
                "-- Table livreauteur
                CREATE TABLE livreauteur (
                    id_livre INTEGER,
                    id_auteur INTEGER,
                    PRIMARY KEY (id_livre, id_auteur),
                    FOREIGN KEY (id_livre
                    ) REFERENCES livre(id) ON DELETE CASCADE,
                    FOREIGN KEY (id_auteur) REFERENCES auteur(id) ON DELETE CASCADE
                );";
            update@Database( updateRequest )( ret )
            updateRequest =
                "CREATE INDEX livreauteur_idx ON livreauteur(id_auteur, id_livre);";
            update@Database( updateRequest )( ret )               
        };
        println@Console("‚úÖ Tables cr√©√©es avec succ√®s.")()
        scope ( insertIntoTable) {
            // install ( SQLException => println@Console("Books already inserted" + SQLException)() );
            updateRequest =
                "-- Insertion des donn√©es dans la table editeur
                ALTER TABLE editeur ALTER COLUMN id RESTART WITH 1;";
            update@Database( updateRequest )( ret )
            updateRequest =
                "INSERT INTO editeur (nom) VALUES
                ('Addison Wesley'),
                ('O‚ÄôREILLY'),
                ('Wiley'),
                ('Prentice Hall'),
                ('Cambridge'),
                ('MK'),
                ('The MIT Press'),
                ('Pitman'),
                ('Silicon Press'),
                ('Dunod'),
                ('Hayden Books'),
                ('Computer Science Press'),
                ('McGraw-Hill'),
                ('EYROLLES');" ;
            update@Database( updateRequest )( ret )
            updateRequest =
                "-- Insertion des donn√©es dans la table categorie
                ALTER TABLE categorie ALTER COLUMN id RESTART WITH 1;";
            update@Database( updateRequest )( ret )
            updateRequest =
                "INSERT INTO categorie (nom) VALUES
                ('Programming'),
                ('Programming Languages'),
                ('Web'),
                ('Distributed Systems'),
                ('Operating Systems'),
                ('Databases'),
                ('Data Structures'),
                ('Java'),
                ('C++'),
                ('Algorithms'),
                ('Rust'),
                ('Computer Science'),
                ('Compilers'),
                ('Python'),
                ('C'),
                ('UNIX');" ;
            update@Database( updateRequest )( ret );
            updateRequest =
                "-- Insertion des donn√©es dans la table auteur
                ALTER TABLE auteur ALTER COLUMN id RESTART WITH 1;";
            update@Database( updateRequest )( ret )
            updateRequest =
                "INSERT INTO auteur (nom) VALUES
                ('David Thomas'),
                ('Andrew Hunt'),
                ('Mark Lutz'),
                ('David Gourley'),
                ('Brian Totty'),
                ('Chris Loosley'),
                ('Frank Douglas'),
                ('Andrew S. Tanenbaum'),
                ('Albert S. Woodhull'),
                ('Jean Bacon'),
                ('M. Herlihy'),
                ('V. Luchangco'),
                ('N. Shavit'),
                ('M.Spear'),
                ('Allen B. Downey'),
                ('Thomas A. Standish'),
                ('Frank M.Carrano'),
                ('Janet J. Prichard'),
                ('Peter Brass'),
                ('E. Horowitz'),
                ('S. Sahni'),
                ('Sara Baase'),
                ('Thomas H. Cormen'),
                ('Charles E. Leiserson'),
                ('Ronald L. Rivest'),
                ('Clifford Stein'),
                ('Bjarne Stroustrup'),
                ('Jim Blandy'),
                ('Jason Orendorff'),
                ('Leonora F. S. Tindall'),
                ('Alfred V. Aho'),
                ('Jeffrey D. Ullman'),
                ('Robert Sedgewick'),
                ('Kevin Wayne'),
                ('Ravi Sethi'),
                ('W. Richard Stevens'),
                ('Brian W. Kernighan'),
                ('Dennis M. Ritchie'),
                ('Paul Anderson'),
                ('Gail Anderson'),
                ('Stephen G. Kochan'),
                ('Patrick H. Wood'),
                ('Michel Gabassi'),
                ('Bertrand Dupouy'),
                ('Jean-Marie Rifflet'),
                ('S. Anderson-Freed');" ;
            update@Database( updateRequest )( ret );
            updateRequest =
                "-- Insertion des donn√©es dans la table livre
                ALTER TABLE livre ALTER COLUMN id RESTART WITH 1;";
            update@Database( updateRequest )( ret )
            updateRequest =
                "INSERT INTO livre (titre, description, isbn, annee_apparition, image, id_editeur) VALUES
                ('The Pragmatic Programmer', '', '135957052', 2019, NULL, 1),
                ('Learning Python', '', '978-1-449-35573-9', 2013, NULL, 2),
                ('HTTP The Definitive Guide', '', '978-1-56592-509-0', 2002, NULL, 2),
                ('High-Performance Client/Server', '', '0-471-16269-8', 1998, NULL, 3),
                ('Operating Systems', '', '0-13-638677-6', 1997, NULL, 4),
                ('Concurrent Systems', '', '0-321-11788-3', 2003, NULL, 1),
                ('The Art of Multiprocessor Programming', '', '978-0-12-415950-1', 2121, NULL, 6),
                ('Think Python', '', '978-1-491-93936-9', 2016, NULL, 2),
                ('Data Structures in Java', '', '0-201-30564-X', 1998, NULL, 1),
                ('Data Abstraction and Problem Solving with Java', '', '0-201-70220-7', 2001, NULL, 1),
                ('Advanced Data Structures', '', '978-1-108-73551-3', 2019, NULL, 5),
                ('Fundamentals of Data Structures', '', '0-914894-20X', 1976, NULL, 8),
                ('Computer Algorithms', '', '0-201-06035-3', 1988, NULL, 1),
                ('Algorithms Unlocked', '', '978-0-262-51880-2', 2013, NULL, 7),
                ('Introduction to Algorithms', '', '978-0-262-04630-5', 2022, NULL, 7),
                ('Programming', '', '978-0-321-99278-9', 2014, NULL, 1),
                ('Programming Rust', '', '978-1-492-05259-3', 2021, NULL, 2),
                ('Foundations of Computer Science', '', '0-7167-8233-2', 1992, NULL, 12),
                ('Computer Science', '', '978-0-13-407642-3', 2017, NULL, 1),
                ('Compilers', '', '0-201-10088-6', 1988, NULL, 1),
                ('Advanced Programming in the UNIX Environment', '', '0-201-56317-7', 1999, NULL, 1),
                ('Fundamentals of Data Structures in C', '', '9780-929306-40-7', 2008, NULL, 9),
                ('Le Langage C', '', '978-2-10-071577-0', 2014, NULL, 10),
                ('Advanced C', '', '0-672-48417-X', 1988, NULL, 11),
                ('Topics in C Programming', '', '0-672-46290-7', 1987, NULL, 11),
                ('L‚Äôinformatique r√©partie sous Unix', '', '0399-4198', 1992, NULL, 14),
                ('La Communication sous UNIX', '', '2-7042-1240-6', 1990, NULL, 13);" ;
            update@Database( updateRequest )( ret );
            updateRequest =
                "-- Ins√©rer les associations livres-cat√©gories
                INSERT INTO livrecategorie (id_livre, id_categorie) VALUES
                (1,1),(2,2),(2,14),(3,3),(4,4),(5,5),(6,5),(6,4),(6,6),(7,1),(8,2),(8,14),(9,7),
                (9,8),(9,1),(10,1),(10,7),(10,8),(11,7),(12,7),(13,10),(14,10),(15,10),(16,1),(16,9),
                (17,1),(17,2),(17,11),(18,12),(19,12),(20,13),(21,1),(21,2),(21,15),(21,16),(22,7),
                (22,15),(23,1),(23,2),(23,15),(24,1),(24,2),(24,15),(25,1),(25,2),(25,15),(26,1),
                (26,2),(26,4),(26,15),(26,16),(27,1),(27,2),(27,4),(27,15),(27,16);" ;
            update@Database( updateRequest )( ret );
            updateRequest =
                " -- Ins√©rer les associations livres-auteurs
                INSERT INTO livreauteur (id_livre, id_auteur) VALUES
                (1,1),(1,2),(2,3),(3,4),(3,5),(4,7),(4,6),(5,9),(5,8),(6,10),(7,11),(7,12),(7,13),
                (7,14),(8,15),(9,16),(10,17),(10,18),(11,19),(12,20),(12,21),(13,22),(14,23),(15,23),
                (15,24),(15,25),(15,26),(16,27),(17,28),(17,29),(17,30),(18,31),(18,32),(19,33),
                (19,34),(20,31),(20,35),(20,32),(21,36),(22,20),(22,21),(22,46),(23,37),(23,38),
                (24,39),(24,40),(25,41),(25,42),(26,43),(26,44),(27,45);" ; 
                update@Database( updateRequest )( ret )                
        }
        println@Console("‚úÖ Donn√©es ins√©r√©es avec succ√®s.")()
    }


    // üîó Connexion MySQL avec gestion des tentatives
    define initializeMySQLConnection {
        scope( connection ) {
            install( ConnectionError =>
                connectionAttempt++;
                if ( connectionAttempt > 3 ) {
                    println@Console("‚ùå Impossible de se connecter √† MySQL apr√®s 3 tentatives.")()
                    global.mysqlAvailable = false
                    throw( ConnectionError )
                } else {
                    println@Console("‚è≥ Tentative " + connectionAttempt + " de connexion √† MySQL...")()
                    sleep@Time( connectionAttempt * 1500 )();
                    initializeMySQLConnection

                }
            )
            with( connectionInfo ) {
                .username = "root";
                .port = 3306;
                .password = "password";
                .host = "mysql";
                .database = "gestion_bibliotheque"; 
                .driver = "mysql"
                .checkConnection = 1;
                .toLowerCase = true
            };
            connect@Database( connectionInfo )();
            println@Console("‚úÖ Connexion MySQL √©tablie.")()
            global.mysqlAvailable = true
            
        }
    }
    // üîó Connexion HSQLDB Embedded
    define initializeHSQLDBConnection {
        scope( hsqldbConnection ) {
            install( HSQLDBError =>
                println@Console("‚ùå Impossible de se connecter √† HSQLDB.")();
                global.hsqldbAvailable = false
                throw( HSQLDBError )
            );
            
            with (connectionInfo) {
                .username = "sa";
                .password = "";
                .host = "";
                .database = "file:bibliodb/bibliodb"; // Pour stockage persistant
                .driver = "hsqldb_embedded"
            };
            connect@Database(connectionInfo)();
            println@Console("‚úÖ Connexion HSQLDB √©tablie.")();
            createBooksDatabase
            global.hsqldbAvailable = true
        }
    }
        
                


    // ‚úÖ Exposition des m√©triques pour Prometheus
    // ‚úÖ R√©ception des alertes Prometheus via Alertmanager
    // ‚úÖ Proxy API pour FastAPI
    inputPort ProxyPort {
        location: "socket://0.0.0.0:9091"
        protocol: http {
            format = "json"
        }
        Interfaces: ProxyInterface                    
    } 
    

    // üîó Connexion √† MySQL et HSQLDB au d√©marrage
    init {
        // üîç Variable globale pour suivre l'√©tat des bases de donn√©es
        global.mysqlAvailable = true
        global.hsqldbAvailable = true
        getenv@Runtime( "HOSTNAME" )( HOSTNAME )

        initializeMySQLConnection
        if(!global.mysqlAvailable) {
            initializeHSQLDBConnection
        }
        
    }

    // ‚úÖ Logique principale
    main {       
        // üîî Gestion des alertes de Prometheus
        [ alert(request)() {
            println@Console("üîî Alerte re√ßue : " + request.alerts[0].labels.alertname)();
            if (request.status == "firing") {
                if (request.alerts[0].labels.alertname == "MySQL_Down") {
                    if (global.mysqlAvailable) {
                        global.mysqlAvailable = false;
                        initializeHSQLDBConnection
                        println@Console("üî¥ MySQL est hors service. Basculement sur HSQLDB.")()
                    }
                }
                if (request.alerts[0].labels.alertname == "MySQL_Up") {
                    if(!global.mysqlAvailable) {
                        global.mysqlAvailable = true;
                        initializeMySQLConnection
                        println@Console("‚úÖ MySQL est de retour en ligne.")()
                    }
                }
                
            }
        }] { nullProcess }

        [ executeQuery(request)(response) {
            scope (dbQueryScope) {
                install(SQLException => {
                    response.error = "Erreur SQL : " + SQLException;
                    response.status = "ERROR";
                    println@Console("‚ùå Erreur SQL : " + SQLException)()
                });

                println@Console("üîé Ex√©cution requ√™te SQL: " + request.query)();
                query@Database(request.query)(dbResponse);
                response.result -> dbResponse;
                response.status = "OK";
                println@Console("‚úÖ Requ√™te ex√©cut√©e avec succ√®s.")()                
            }
        }] { nullProcess }

        // üìä Fournir les m√©triques √† Prometheus
        [ metrics()(response) {
            println@Console("üìä Envoi des m√©triques √† Prometheus.")();
            if (global.mysqlAvailable) {
                response = "jolie_backend_replica 2\n"
            } else {
                response = "jolie_backend_replica 1\n"
            }
            
        }] { nullProcess }
    }
}
