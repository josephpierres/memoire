# collecteur de logs -Fluentd
x-logging: &default-logging
  driver: 'fluentd'
  options:
    fluentd-address: 'localhost:24224'
    tag: 'httpd.access'
  

services:
  # Serveur de base de donn√©es MySQL
  mysql:
    image: mysql:8.0.22   
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password    
    restart: always   
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: gestion_bibliotheque
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword     
    volumes:
      - ./mysql/db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./mysql/log:/var/log/mysql
      - ./mysql/app:/app
      - ./mysql/data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 20s
      retries: 10
    # depends_on:
    #   - fluentd
    # logging: *default-logging     

  # Serveur de cache Redis
  redis:
    container_name: redis
    image: redis:7.2.4    
    ports:
      - '6379:6379'
    volumes:
      - ./redis/data:/data
      - ./redis/log:/var/log
    # depends_on:
    #   - fluentd
    # logging: *default-logging 

  # Frontend Application WSGI (Flask)
  biblio_app:
    build:
      context: ./biblio_app
      dockerfile: Dockerfile
    image: biblio_app
    container_name: biblio_app
    restart: always    
    environment:      
      - FLASK_ENV=production
      - APP_NAME=Biblio-app
      - REDIS_URL=redis://redis:6379/0 
      - OTEL_PYTHON_LOG_CORRELATION=true
      - Biblio_api_URL = http://biblio_api:8084                  
    ports:
     - '8083:8083' # http uwsgi
     - '8081:8081' #socket nginx
     - '9191:9191' # stats server    
    depends_on:      
      - redis
      - biblio_api     
    #   - prometheus
    #   - grafana    
    #   - fluentd
    # logging: *default-logging 

  # backend Fastapi de python
  biblio_api:
    image: biblio_api
    container_name: biblio_api
    build:
      context: ./biblio_api
    restart: always
    environment:      
      - MYSQL_PORT=3306
      - OTEL_PYTHON_LOG_CORRELATION=true       # To enable trace context injection into logs, https://github.com/softwarebloat/python-tracing-demo
    command:     
      - 'python3'
      - 'app.py'             
    ports:
      - "8084:8084"
    depends_on:     
      - mysql  
      # - fluentd
    # logging: *default-logging  

  # Serveur Nginx
  nginx:
    # build:
    #     context: ./nginx
    #     dockerfile: Dockerfile
    container_name: nginx
    image: nginx:latest
    # command: nginx -g 'daemon off;'
    restart: always
    volumes: 
      # - './nginx/configs/opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf'
      - './nginx/configs/default.conf:/etc/nginx/conf.d/default.conf'
      # - './nginx/www:/var/www/html'
      # - './nginx/log:/var/log/nginx'
    ports:
      - '8000:80'
    expose: 
    - 80
    depends_on:
      - biblio_app
    #   - fluentd
    # logging: *default-logging 
#   # Tempo receuille les Traces et les envoie a Elasticsearch
#   tempo:
#     image: grafana/tempo:2.4.1
#     container_name: tempo
#     volumes:
#       - ./etc/tempo/tempo.yaml:/etc/tempo.yaml
#     command: [
#               "-config.file=/etc/tempo.yaml",
#               "--target=all", 
#               # "--storage.trace.backend=local", 
#               # "--storage.trace.local.path=/var/tempo", 
#               # "--auth.enabled=false" 
#               ]
#     ports:
#       - "4317:4317"
#       - "4318:4318"
#     depends_on:
#       - elasticsearch
 
      
#   # Prometheus pour les metriques et connexion avec Grafana
#   prometheus:
#     container_name: prometheus
#     image: prom/prometheus:v2.17.1
#     user: root
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./etc/prometheus/configs/:/etc/prometheus/      
#       - ./etc/prometheus/data/:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#       - '--web.console.templates=/usr/share/prometheus/consoles'
#       - '--web.enable-lifecycle'
#       - '--storage.tsdb.retention.time=60s'
#       # - --enable-feature=exemplar-storage
      
#     depends_on:
#       - alertmanager    
#   # Grafana: visualisation des logs metriques, traces et alertes 
#   grafana:
#     image: grafana/grafana:latest
#     container_name: grafana
#     environment:
#       - GF_SECURITY_ADMIN_USER=admin
#       - GF_SECURITY_ADMIN_PASSWORD=admin     
#       - GF_LOG_LEVEL=debug
      
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./etc/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
#       - ./etc/grafana/provisioning/dashboards/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
#       - ./etc/grafana/dashboards/:/etc/grafana/dashboards/
#       - 'grafana_storage:/var/lib/grafana'
#       - ./etc/grafana/plugins:/var/lib/grafana/plugins
#       - ./etc/grafana/grafana.ini:/etc/grafana/grafana.ini
#     depends_on:      
#       - prometheus
    
  
  
#   # 
#   alertmanager:
#         image: prom/alertmanager:v0.27.0
#         container_name: alertmanager
#         restart: unless-stopped
#         ports:
#             - "9093:9093"
#         volumes:
#         - ./etc/alertmanager/config.yml:/etc/alertmanager/config.yml
#         - ./etc/alertmanager/data:/data
#         command: 
#         - "--config.file=/etc/alertmanager/config.yml"
#         - '--log.level=debug'
#         deploy:
#           mode: global

#   fluentd:
#     build:
#       context: ./etc/fluentd
#     image: 'fluentd-test:dev'
#     container_name: fluentd
#     environment:
#       FLUENT_ELASTICSEARCH_HOST: elasticsearch
#       FLUENT_ELASTICSEARCH_PORT: 9200
#     volumes:
#       - './etc/fluentd/log:/var/log/fluentd'   
#       - './etc/fluentd/conf:/fluentd/etc'
#       - './nginx/log:/var/log/nginx '
      
#     user: root
#     command: ["fluentd", "-c", "/fluentd/etc/fluent.conf"]
#     depends_on:
#       - "elasticsearch"
#     ports:
#       - "24224:24224"
#       - "24224:24224/udp"

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.17.24  #7.13.1
#     container_name: elasticsearch
#     volumes:
#       # For persistent data
#       - ./etc/elasticsearch/data:/usr/share/elasticsearch/data/
#     environment:
#       - "discovery.type=single-node"
#       - xpack.security.enabled=false
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#       - node.name=elasticsearch
#       - cluster.name=es-cluster-7    
      
#       # - "http.port=9200"
#       # - "http.cors.allow-origin=http://127.0.0.1:1358"
#       # - "http.cors.enabled=true"
#       # - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
#       # - "http.cors.allow-credentials=true"
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     expose:
#       - "9200"
#     ports:
#       - "9200:9200"

#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.17.24 #7.13.1
#     container_name: kibana
#     environment:
#       ELASTICSEARCH_URL: elasticsearch:9200
#     depends_on:
#       - "elasticsearch"
#     ports:
#       - "5601:5601"  

#   metricbeat:
#     container_name: metricbeat
#     build: ./etc/metricbeat
#     # image: docker.elastic.co/beats/metricbeat:7.13.1
#     environment:
#       ELASTICSEARCH_HOSTS: elasticsearch:9200
#     volumes:
#       - ./etc/metricbeat/data01:/usr/share/metricbeat/data
    
#     depends_on:
#       - elasticsearch

# volumes:
#   grafana_storage: {}
  